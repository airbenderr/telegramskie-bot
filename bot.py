import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from config import Config
from llm import query_llm, reset_context

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=Config.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    reset_context(message.from_user.id)
    await message.answer(
        "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–Ø AI-–ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start –∏–ª–∏ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/clear ‚Äî —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞"
    )

@dp.message(Command("clear"))
async def clear_chat(message: types.Message):
    reset_context(message.from_user.id)
    await message.answer("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω.")

@dp.message()
async def handle_text(message: types.Message):
    if not message.text:
        return
    await bot.send_chat_action(message.chat.id, "typing")
    response = await query_llm(message.from_user.id, message.text)
    await message.answer(response)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
